
* How to co-op: Salaries & Reviews

Today, I'm a wifi parasite in the uSwitch [ http://www.uswitch.com/ ] office. Over lunch, Tom Hall [ http://www.thattommyhall.com/ ] pointed out that nilenso doesn't pay bonuses, instead opting for transparent salaries, chosen on merit to the degree possible [ http://blog.deobald.ca/2014/11/huh-software-cooperative.html ]. His question is one we get often: How *do* you decide salaries?

Our first stab at this was a model we'd inherited from other companies we'd worked at: have salary bands which match up to the skill and experience of the current staff, match that to the available cash, and set salaries accordingly. At first, we actually started off with an approach that was even more naive -- rather than salary bands, we had "levels". To improve one's salary beyond the usual bump provided for inflation, it was really a huge leap from "college kid" to "junior" to "intermediate" to "senior". Under this model, we also had no real vision for future "levels".

[ levels.png ]

This system is very obviously broken when graphed this way, but there are a number of little firms in Bangalore which still operate this way. The inevitable conclusion is the introduction of "Level 2.5" and other confused ideas which make a broken system even worse.

Incrementing on this inherited model, we tried to smooth out the curve and divide up each "level" into ten increments. The old integer levels (now L1.0, L2.0, and so on) now represented concrete, documented responsibility changes and the new incremental levels (L2.2, L4.3) were a sort of tweened [ https://en.wikipedia.org/wiki/Inbetweening ] into thirds. Some concrete examples: L2.0 is a intermediate developer who is capable of driving design decisions (and a pair, if pair programming). L3.0 is an intermediate developer who can mentor, architect individual systems, and drive hiring decisions. L2.1 to 2.3, L2.4 to 2.6, and L2.7 to 2.9 give us three junior-to-senior tiers to play with when describing the growth of a developer from a "solid intermediate pair" to "mentor".

** Reviews in 2014

Once we had the incremental model in place, we tried to iterate on our previous experience of "behind closed doors" reviews, as well. The goals were transperency, fairness, and comfort. Big all-hands referendums could be emberassing -- and had proven inefficient for all sorts of other decisions, which caused us to elect a small "Executive" (two people), similar to an elected Board of Directors in a large corporate co-operative. The Executive drove the review process. We kept track of each review on a whiteboard, so everyone could see what was going on as it happened. Each review included the two people from the Executive, the person being reviewed, that person's "sponsor" (another vestige of other companies we'd worked for - namely, ThoughtWorks), and their closest coworkers/team members. The sponsor presented a proposed salary, and the review discussion worked backward from there. The process worked reasonably well, but as we discovered this year, we were a bit too liberal with salary jumps.

Once we'd finished the review cycle, we took a step back and tried to answer the "what does the future look like?" question. Working with "explicit is better than implicit" [ http://c2.com/cgi/wiki?PythonPhilosophy ] as a foundational rule, one is forced to visualize a _complete_ salary framework. This implies a couple of things:

1) "complete" inherently means "global"
2) "complete" inherently means "lifelong"

Therefore, our salary bands had to map a curve from the lowest-paid, straight-out-of-college hacker to the most talented and experienced computer scientist money can hire. The former is easy enough to imagine; we've all hired dozens of those folks. But the best of the best, near the end of her career? I'm not even sure I've met such a person.

** The COMPLETE Salary Curve

So, for the sake of argument, let's assume we're hiring Leslie Lamport, assuming he makes a high salary at Microsoft Research. Or perhaps a senior-most computer programmer from Google. A little asking around, Glassdoor [ http://www.glassdoor.com/Salary/Microsoft-Researcher-Salaries-E1651_D_KO10,20.htm ], and that infamous secret.ly thread tell us that our ballpark figure of $500,000 USD isn't too far off. Maybe a little higher or a little lower, but something so far away from nilenso's present reality need not be too precise. It's just a helpful stake in the ground. A $500,000 salary represents Level 10.0 -- someone who's about to retire and has turned the industry upside down over the course of their career.

There's huge value in imagining the highest salary you will ever pay. We humans don't like to spend a lot of time pondering the end of our productive days. We like to spend time pondering the scary last chapter of our mortality even less. But these things are real. Everything real, everything fact-based, has to be laid bare in a completely transparent organization.

Our first pass was difficult, uncomfortable, and (of course) incorrect.

[ deepa's curve visualization from 2014 ]

Fast forward one year to nilenso's 2015 review cycle, and it was apparent our curve didn't really fit. We'd made a few mistakes: high-end salaries (L4.x and L5.x) were too high, some jumps had been too big, the L1 salary band didn't fit on a smooth curve. However, being completely honest about the data is only step #1. Step #2 is to be completely honest with ourselves: we'd made some mistakes in 2014 and we needed to correct them. The L1 salary band moved up, some L2.x salaries didn't jump as much as expected, L4.x and L5.x salaries came way down.

Our second pass was difficult, uncomfortable, and (will likely be) incorrect.

[ deepa's new curve from 2015 ]

But it was a little less difficult, a little less uncomfortable, and (hopefully) a little less incorrect. The goal is not perfection. Next year, the benefit of hindsight will expose our mistakes and we can once again go through the mild discomfort of correcting them. And, with any luck, our second pass was enough of an improvement on our first that the mistakes will be smaller.

I've jumped ahead of myself a bit, here. The 2015 salary curve starts at about 7.5 lakh rupees ($12,000 USD) for Level 0.0 and curves relatively smoothly up to 317 lakh rupees ($500,000 USD) for Level 10.0. Everyone at nilenso is presently L1.x - L4.x, so don't get too excited about multi-crore salaries we might lavish you with. But how did we arrive at the curve?

** Reviews in 2015: Tim & Deepa to the rescue

Our review process in our first year wasn't too bad. Everyone received meaningful feedback and was given a clear path for growth. However, it felt ad-hoc, everyone's feedback/reviews were delayed (as they are in most companies), and it felt strange to have the Executive drive the conversation -- even the most logical and robotic Executives are still human and are still likely to introduce their own bias. In 2015, we improved on this thanks to two distinct efforts.

First, Tim signed up for organizing the review process with Deepa. This tends to be a thankless job, consisting mostly of manually coordinating an Excel spreadsheet. Tim, being Tim, spent a Saturday automating the review workflow instead. The nilenso reviews app [ https://github.com/nilenso/reviews ] was born. Since any annual review cycle for any company tends to be little more than swimlanes of todo lists, it was the perfect job for Rails and Heroku. Tim, and anyone else at nilenso, could modify the workflow, relationships, and privacy across the reviews process in a matter of minutes. Everyone could glance at http://reviews.nilenso.com to see their feedback and to hassle people who hadn't reviewed their colleagues yet.

The review app lets everyone ask for reviews/feedback from specific people. Reviewers are then tasked with completing a review for everyone who asked them. Each review is a free-form text entry field and a "suggested level" field, if the reviewer is compfortably suggesting the reviewee's growth in the past year. Though we'd initially planned on discussing salaries directly, the Level system addresses skill, contribution, network, and experience rather than what anyone "feels" other employees should make. This has the immeasurable advantage of keeping emotion out of the equation and keeping everyone focused on the facts at hand.

Second, Deepa facilitated the "review meetings". After scheduling and planning each meeting with Tim, she played the role of non-participating faciliatator to discussions which included the reviewee, everyone who gave them a review in the app, and anyone else who wanted to listen in. Each meeting started with everyone in the room grabbing a laptop (or iPad) and quickly re-reading the reviews in question, to make sure they hadn't missed anything. Then the reviewee would summarize their self-review and the reviews they'd received from their coworkers; we did away with "sponsors" and let the person speak for themselves. At the end of the summary, s/he would explain whether the average Suggested Level (calculated by the app) seemed appropriate. The floor was then open to discuss and debate.

A small consulting company has a fixed amount of money to spend on annual raises. By working through the entire review process without discussing money, we were free to be completely honest with one another with feedback and conversation. Certainly some conversations were harder than others, but on the whole the process went very smoothly. Once everyone's reviews were complete, Deepa took away a Level Curve (really more of a straight line with dots on it) which she could retrofit our earnings onto. That became the proposed Salary Curve, which we discussed one last time and then finalized.
