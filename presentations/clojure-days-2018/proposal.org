* Practical Generative Testing Patterns

** Elevator Pitch [actually 300 chars]
Generative tests are great! But we don't write them often enough. Why not?

As unit tests, they can be harder to write and read. As stateful acceptance tests, they can be brittle, slow, and unjustifiable.

I'll discuss some important patterns to leverage generative tests to their potential.

** Description
Here is a rough outline:

*** Intro [2m]
  - About me, nilenso
  - About this talk, outline

*** Why? 2 brief case studies [10m]
  - Testing a large scale experimentation platform built for Staples
  - Testing a distributed payments platform with over a 100 API endpoints

*** Tools, and choices [5m]
  - clojure.test, and data.generators
  - Datomic, Simulant, and Causatum
  - Spec, test.check, and datascript

*** What doesn't work? [Antipatterns] [5m]
  - Imperative description of functionality
  - Evolving test suite independently from the source
  - Exclusively as stress tests, or as smoke tests
  - The other extreme: so declarative we grew a lisp within a lisp

*** What works [Patterns] [20m]
  - Establish Terminology: state, action, flow, simulation
  - Generally applicable system properties: no errors, availability, idempotence
  - Generally applicable algebraic properties: equality, associativity, commutativity (surprisingly so)

*** Patterns that reduce costs, and improve maintainability
 - DAGs, and Probability matrices to describe flows
 - Declarative specification of known failures and errors
 - Deriving parameter specification from service's API catalog
 - Realistic seed data, for deterministic results
 - Sensible default settings for axes of testing
 - Responses as params for subsequent requests

*** Patterns to improve leverage
 - Reproducibility: tests as portable data
 - State machines as properties
 - Readable test reports
 - Step-by-step diagnosis of failures

** Notes
*** Why I thought this talk would be a good idea

At the conj (2017), many people I met said they did use generative tests. But when we talked about it more, I found most people have difficulty coming up with good properties to assert. Or didn't know how to write generative tests for stateful systems.

Generative tests are commonplace in clojure. But there isn't much out there in terms of usage patterns, or how to make them more efficient.

This talk mostly builds on two large projects, that I mention in the outline:

 - Testing a large scale experimentation platform built for Staples
 - Testing a distributed payments platform with over a 100 API endpoints

*** Previous talks for reference
- Euroclojure 2016: [Making Machines that Make Music](https://www.youtube.com/watch?v=ZvSSeuzN_b4)
- Fragments 2017: [REPL driven mobile development](https://www.youtube.com/watch?v=toGEegAzrZA)
- FunctionalConf 2015: [Building an Experimentation Platform in Clojure](https://www.youtube.com/watch?v=YjfXhhxw9Bs)
- Rootconf 2015: [On the building of a Postgres cluster](https://www.youtube.com/watch?v=sGJDg5ba0iI)

** Bio
Srihari is a FOSS enthusiast. He has contributed to Gimp, Eclipse,
Diaspora and is excited about opportunities to give back. He has been
writing Clojure for over 5 years now, and over this time, he has
engineered low latency systems, large analytics platforms, monitoring
solutions, distributed payment platforms and multiple simulation
testing systems.

He is passionate about fostering the Clojure community, conducts
workshops, and organizes IN/Clojure. He also works on computational
music synthesis and generation as a hobby.

He is a partner at nilenso, a hippie tree hugging bicycle riding
software cooperative based in Bangalore.
