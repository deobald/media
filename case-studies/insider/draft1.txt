
# Case Study: Insider.in

PayTM Insider is India's largest online ticketing and events company. Insider approached nilenso in early 2018 with a concept for an entirely new business model. Millions of fans already attend Insider's live events. Insider wanted to bring those events online. Could nilenso help them host online events -- with software hosting all those millions of fans _at once_?

## The Problem

It wasn't a foregone conclusion that we could build such a system. We certainly had never built one like it before. Even software like Twitch.tv, dedicated to streaming video to simultaneous users, lives in the realm of "millions of simultaneous users". Even Insider's live events, such as NH7 Weekender, were known to draw crowds large enough to bring commercial telecommunications infrastructure to its knees. Building a platform to host even larger online events? We were intrigued.

The project began with the disarmingly simple problem statement: "Stream video to one million concurrent users." Outside of a real emergency, we would never normally work weekends, but we had worked with the team from Insider before and we were just as excited as they were about solving this puzzle. We spent that first weekend split into teams, battling a GoLang prototype against an Elixir prototype. (By which, we really mean Erlang... by which, we really mean BEAM and ERTS, Erlang's Virtual Machine and Runtime. We'll get to that later, though.) Our usual weapon of choice, Clojure, wasn't a good fit for a system that demanded one million simultaneous connections because the JVM's scaling models were simply too heavy. GoLang has some wonderful concurrency primitives, but they proved no match for Erlang's ultralightweight processes and in-your-face distributed systems approach. By the end of the weekend, Elixir had won the brawl and the project had a name: _ngage_.

## The Solution

Building on the Erlang runtime meant distributed systems were baked into every component and, while the team was very experienced with distributed systems [1] and the Patterns of Enterprise Application Architecture [2], our past toolkits rarely _enforced_ message-passing. BEAM (and therefore, Elixir) declare, existentially, that message-passing and process boundaries (and thus their inverse: process size), are the primary considerations of system design. To build a functional system on BEAM at all, you must build a distributed system. Over the first few weeks of the project, the team deeply embedded themselves in Erlang runtime's message-passing paradigm --- learning, experimenting, and exploring along the way. The team had chosen Elixir precisely for its runtime and when it was time to load test the system, the distributed-system-up-front model had already proven itself.

Load testing is an exercise delineated by orders of magnitude. It becomes a non-trivial task when simulating concurrent users ordering in the hundreds of thousands. The team nicknamed these thousands of gossamer androids "The Mob"... built to swarm _ngage_ with parallel but uncoordinated activity in hopes of breaking the system in the safety of a sandbox. The Mob Simulator (_mobsim_) would continuously test _ngage_, looking for weaknesses in its distributed design, in turn helping the team carve out the all-important process boundaries. Neena would eventually transform the lessons from these iterations into his talk, "After The Crash", discussing systems design on the BEAM Virtual Machine. [3] In his words, "many problems are simply avoided altogether because [Erlang] puts the complexity of scaling distributed systems front-and-centre, even when you run the system on a laptop."

Over the project's 18-month journey, starting with that first furious weekend and ending with the project handover, there were more landmarks than meeting the million-concurrent-users requirement alone. A digital event isn't really an "event" if it's not interactive. Insider hadn't hired us to build YouTube. The first incarnation was a massive quiz show, which meant that the hundreds of thousands of participants needed to see the quiz questions at the _exact same time_. Initially, even the synchronization of questions to the video feed created difficulties. Video needed to be transcoded into a variety of formats for different users and, even after a number of transcoding optimizations, video was consistently delayed by almost 10 full seconds. Synchronizing systems by timestamp was no mystery to the nilenso team but it was a new exercise to stamp metadata into streaming video. This self-identified the sync time and compensated for server-side transcoding delays in the mobile clients, ensuring questions always appeared to users at exactly the right time.

Often, project landmarks were not of a technical nature at all. The Insider team was incredibly busy with myriad projects at their headquarters in Bombay. Although both teams were operating on India Standard Time, it was often difficult for anyone in Bombay to make time for conversations... and a much bigger struggle to find time for prioritization. The counterintuitive solution was one many of nilenso's clients have chosen in the past: let nilenso drive the project. Insider knows events; nilenso knows software. The nilenso team would construct technical priorities and pursue them, reviewing the pending work with Insider whenever possible.

After months of research, exploration, and iterative development between the nilenso team, Insider's team in Bombay, and the mobile app team from Uncommon in Hyderabad, it was time to take _ngage_ out of its sandbox. Battle-hardened by simulations provided by _mobsim_, it would finally see real phones across India connect to it. All three teams, spread across Bombay, Bangalore, and Hyderabad, would connect and listen to nilenso's tech lead shout "question!" while sending out the synchronized quiz question for everyone to respond. In each office, an echo of "que-ques-qu-question-tion-ion-n!" could be heard across the phones in the room. After everyone was satisfied with the behaviour of the system in the contrived scenario, Insider opened _ngage_ up to the real world with its initial public Betas.

Not

- "summary" / Beta 1
- Beta 2
- Travel to Bombay

## Outcomes

- Poll format
- Erlang = yay
- simulation framework
- transition to in-house team

The software industry frequently reaches for descriptions like "challenging work" and "world-class developers"... frequently enough that these words have become meaningless. There exists a dichotomy in the world of software consulting that we often fumble to clearly describe. On one hand, some custom software lives in the world of the _bespoke_. A good tailor does not reinvent the craft of tailoring every time he cuts a new suit. Similarly, the three million apps on the Stores for iOS and Android largely don't represent revolutions in Computer Science. Humanity isn't the proud custodian of billions of web apps because they each represent a brainchild of software engineering's avant-garde. Software in the 21st Century is wildly democratic, which is wonderful because a developer doesn't have the energy to rediscover the very definition of a mobile app every time she writes one. On the other hand, however, there exist software projects which are truly experimental and genuinely difficult. This was one such project.

## References

[1] Talks by nilenso employees - https://youtube.com/c/nilenso
[2] "Patterns of Enterprise Application Architecture" - https://dl.acm.org/doi/book/10.5555/579257
[3] "After The Crash" - https://www.youtube.com/watch?v=9nbPZOHBsK4
